[General]
include scenarios.ini                   # definition of scenarios / examples
    
#-----------------------Debug Output Switches-----------------------#
#**.macDebug = false    # either use ** form or the long form if you want to enable it for specific nodes only
*.IEEE802154Nodes[*].Network.stdLLC.llcDebug = true
*.IEEE802154Nodes[*].Network.sscs.sscsDebug = true
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.macDebug = true
*.IEEE802154Nodes[*].NIC.PHY.phyDebug = true
*.IEEE802154Nodes[*].NIC.radioInterface.radioDebug = true



*.IEEE802154NodesAttacker[*].Network.stdLLC.llcDebug = true
*.IEEE802154NodesAttacker[*].Network.sscs.sscsDebug = true
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.macDebug = true
*.IEEE802154NodesAttacker[*].NIC.PHY.phyDebug = true
*.IEEE802154NodesAttacker[*].NIC.radioInterface.radioDebug = true

check-signals = true
debug-on-errors = true


#----------------------Result Output Switches-----------------------#
record-eventlog = false
**.scalar-recording = false
**.vector-recording = false


#----------------------Random Options / Switches--------------------#
rng-class = "cMersenneTwister" # which RNG type should be used
num-rngs = 1                    # number of RNGs to create
seed-0-mt = 1234567             # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module

*.IEEE802154Attacker[*].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module

#------------------------------Mobility-----------------------------#
*.IEEE802154Nodes[*].mobilityType = "StationaryMobility"        #   different settings defined per scenario / example

*.IEEE802154Nodes[*].mobility.constraintAreaMinX = 0m
*.IEEE802154Nodes[*].mobility.constraintAreaMinY = 0m
*.IEEE802154Nodes[*].mobility.constraintAreaMinZ = 0m
*.IEEE802154Nodes[*].mobility.constraintAreaMaxX = 400m
*.IEEE802154Nodes[*].mobility.constraintAreaMaxY = 400m
*.IEEE802154Nodes[*].mobility.constraintAreaMaxZ = 0m


*.IEEE802154NodesAttacker[*].mobilityType = "StationaryMobility"        #   different settings defined per scenario / example

*.IEEE802154NodesAttacker[*].mobility.constraintAreaMinX = 0m
*.IEEE802154NodesAttacker[*].mobility.constraintAreaMinY = 0m
*.IEEE802154NodesAttacker[*].mobility.constraintAreaMinZ = 0m
*.IEEE802154NodesAttacker[*].mobility.constraintAreaMaxX = 400m
*.IEEE802154NodesAttacker[*].mobility.constraintAreaMaxY = 400m
*.IEEE802154NodesAttacker[*].mobility.constraintAreaMaxZ = 0m


**.initFromDisplayString = true     # "true" for fixed automatic node positions, "false" for manual placement (cp. scenarios.ini) 


#-----------------------------APP Layer-----------------------------#
#
# Application specific parameters can be found in the scenarios.ini file
#


#--------------------Logical Link Control (LLC)---------------------#
*.IEEE802154Nodes[*].Network.stdLLC.convertMode = true # set this true if your app layer is not compatible to a 802.15.4 MAC entity
*.IEEE802154Nodes[*].Network.stdLLC.PollFrequency = 0.5
# TXoptions as descibed in IEEE standard (Std 802.15.4-2006 page 69) 
# The 3 bits (b0, b1, b2) indicate the transmission options for this MSDU.
*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 0
# For b0: 1 = acknowledged transmission, 0 = unacknowledged transmission.
# For b1: 1 = GTS transmission, 0 = CAP transmission for a beacon-enabled PAN.
# For b2: 1 = indirect transmission, 0 = direct transmission.
# For a nonbeacon-enabled PAN, bit b1 should always be set to 0.
#----------- LLC Variables for PAN startup
*.IEEE802154Nodes[*].Network.stdLLC.PANId = 007
*.IEEE802154Nodes[*].Network.stdLLC.LogicalChannel = 25
*.IEEE802154Nodes[*].Network.stdLLC.ChannelPage = 0
*.IEEE802154Nodes[*].Network.stdLLC.StartTime = 0              # we want other receivers to receive the first beacon while scanning
*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 6 
*.IEEE802154Nodes[*].Network.stdLLC.BatteryLifeExtension = false
*.IEEE802154Nodes[*].Network.stdLLC.CoordRealignment = false
#----------- LLC Variables for initial Channel Scan
*.IEEE802154Nodes[*].Network.stdLLC.ScanChannels = 16777216 # e.g. 50331648 = Channel 26 & 25 or 16777216 for only Channel 25
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1        # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols
*.IEEE802154Nodes[*].Network.stdLLC.ScanPage = 0            # 
*.IEEE802154Nodes[*].Network.stdLLC.ScanType = 1            # always should choose 1 for initial active scan



*.IEEE802154NodesAttacker[*].Network.stdLLC.convertMode = true # set this true if your app layer is not compatible to a 802.15.4 MAC entity
*.IEEE802154NodesAttacker[*].Network.stdLLC.PollFrequency = 0.5
# TXoptions as descibed in IEEE standard (Std 802.15.4-2006 page 69) 
# The 3 bits (b0, b1, b2) indicate the transmission options for this MSDU.
*.IEEE802154NodesAttacker[*].Network.stdLLC.TXoption = 0
# For b0: 1 = acknowledged transmission, 0 = unacknowledged transmission.
# For b1: 1 = GTS transmission, 0 = CAP transmission for a beacon-enabled PAN.
# For b2: 1 = indirect transmission, 0 = direct transmission.
# For a nonbeacon-enabled PAN, bit b1 should always be set to 0.
#----------- LLC Variables for PAN startup
*.IEEE802154NodesAttacker[*].Network.stdLLC.PANId = 007
*.IEEE802154NodesAttacker[*].Network.stdLLC.LogicalChannel = 25
*.IEEE802154NodesAttacker[*].Network.stdLLC.ChannelPage = 0
*.IEEE802154NodesAttacker[*].Network.stdLLC.StartTime = 0              # we want other receivers to receive the first beacon while scanning
*.IEEE802154NodesAttacker[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154NodesAttacker[*].Network.stdLLC.SuperframeOrder = 6 
*.IEEE802154NodesAttacker[*].Network.stdLLC.BatteryLifeExtension = false
*.IEEE802154NodesAttacker[*].Network.stdLLC.CoordRealignment = false
#----------- LLC Variables for initial Channel Scan
*.IEEE802154NodesAttacker[*].Network.stdLLC.ScanChannels = 16777216 # e.g. 50331648 = Channel 26 & 25 or 16777216 for only Channel 25
*.IEEE802154NodesAttacker[*].Network.stdLLC.ScanDuration = 1        # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols
*.IEEE802154NodesAttacker[*].Network.stdLLC.ScanPage = 0            # 
*.IEEE802154NodesAttacker[*].Network.stdLLC.ScanType = 1            # always should choose 1 for initial active scan


#--------------------Medium Access Control Layer--------------------#
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.panCoordinatorName = "George" # choose your name
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.ackForGts = false
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = false # set this to true if you want that the MAC to start up 
                                                                        # the PAN in Beacon-enabled without the Start primitive
                                                                        # BO, SO channel and coordinator will be ignored if false
# set this mode for all MLME Messages 1=CAP 2=GTS 3=indirect
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.gtsPayload = 10
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.defChann = 25                # MAC needs to know init channel for backoff calculation
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.isRecvGts = true
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.isFFD = true                 # RFDs don't react on Associate request, won't be Coordinator and don't do orph scan

*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.macAddr = "auto"             # uncomment in case you want to set MAC addresses manually
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.macAddr = "AC:DE:48:00:00:00:00:01"
#*.IEEE802154Nodes[1].NIC.MAC.IEEE802154Mac.macAddr = "AD:DE:48:00:00:00:00:02"
#*.IEEE802154Nodes[2].NIC.MAC.IEEE802154Mac.macAddr = "AD:DE:48:00:00:00:00:03"
#*.IEEE802154Nodes[3].NIC.MAC.IEEE802154Mac.macAddr = "AD:DE:48:00:00:00:00:04"



*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 6
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.panCoordinatorName = "George" # choose your name
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.ackForGts = false
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = false # set this to true if you want that the MAC to start up 
                                                                        # the PAN in Beacon-enabled without the Start primitive
                                                                        # BO, SO channel and coordinator will be ignored if false
# set this mode for all MLME Messages 1=CAP 2=GTS 3=indirect
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.gtsPayload = 10
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.defChann = 25                # MAC needs to know init channel for backoff calculation
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.isRecvGts = true
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.isFFD = true                 # RFDs don't react on Associate request, won't be Coordinator and don't do orph scan

*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.macAddr = "AD:DE:48:00:00:00:00:FF"             # uncomment in case you want to set MAC addresses manually
#.IEEE802154NodesAttacker[0].NIC.MAC.IEEE802154Mac.macAddr = "AC:DE:48:00:00:00:00:03"
#*.IEEE802154Attacker[1].NIC.MAC.IEEE802154MacAttacker.macAddr = "AD:DE:48:00:00:00:00:02"
#*.IEEE802154Attacker[2].NIC.MAC.IEEE802154MacAttacker.macAddr = "AD:DE:48:00:00:00:00:03"
#*.IEEE802154Nodes[3].NIC.MAC.IEEE802154Mac.macAddr = "AD:DE:48:00:00:00:00:04"


#--------------------Radio & PHY-PIB--------------------#
*.IEEE802154Nodes[*].NIC.radioInterface.carrierFrequency = 2.4GHz
*.IEEE802154Nodes[*].NIC.radioInterface.transmitterPower = 1mW          # check that channelControl.pMax is set accordingly
*.IEEE802154Nodes[*].NIC.radioInterface.sensitivity = -92dBm
*.IEEE802154Nodes[*].NIC.radioInterface.bitrate= 250kbps
*.IEEE802154Nodes[*].NIC.radioInterface.radioModel = "GenericRadioModel"
*.IEEE802154Nodes[*].NIC.radioInterface.channelNumber = 25
*.IEEE802154Nodes[*].NIC.radioInterface.ccaMode = 1     # mode 1 = ED only; mode 2 = carrier sense only ; mode 3 = carrier sense + ED
*.IEEE802154Nodes[*].NIC.PHY.CCAMode = 1                # ditto
*.IEEE802154Nodes[*].NIC.PHY.transmitPower = 1
*.IEEE802154Nodes[*].NIC.PHY.channelsSupported = "2046,2147485694,1073743870"
*.IEEE802154Nodes[*].NIC.PHY.currentChannel = 25
*.IEEE802154Nodes[*].NIC.PHY.currentPage = 0
*.IEEE802154Nodes[*].NIC.PHY.symbolsPerOctet = 2    # 2 symbols for 1 Byte @ 2.4 GHz O-QPSK
*.IEEE802154Nodes[*].NIC.PHY.SHRDuration = 10       # 5 Bytes (1 Byte Preamble + 1 Byte SFD) = 10 Symbols @ 2.4 GHz O-QPSK

#*.IEEE802154NodesAttacker[*].NIC.radioInterface.maxDistance = 5m
*.IEEE802154NodesAttacker[*].NIC.radioInterface.carrierFrequency = 2.4GHz
*.IEEE802154NodesAttacker[*].NIC.radioInterface.transmitterPower = 1mW          # check that channelControl.pMax is set accordingly
*.IEEE802154NodesAttacker[*].NIC.radioInterface.sensitivity = -92dBm
*.IEEE802154NodesAttacker[*].NIC.radioInterface.bitrate= 250kbps
*.IEEE802154NodesAttacker[*].NIC.radioInterface.radioModel = "GenericRadioModel"
*.IEEE802154NodesAttacker[*].NIC.radioInterface.channelNumber = 25
*.IEEE802154NodesAttacker[*].NIC.radioInterface.ccaMode = 1     # mode 1 = ED only; mode 2 = carrier sense only ; mode 3 = carrier sense + ED
*.IEEE802154NodesAttacker[*].NIC.PHY.CCAMode = 1                # ditto
*.IEEE802154NodesAttacker[*].NIC.PHY.transmitPower = 1
*.IEEE802154NodesAttacker[*].NIC.PHY.channelsSupported = "2046,2147485694,1073743870"
*.IEEE802154NodesAttacker[*].NIC.PHY.currentChannel = 25
*.IEEE802154NodesAttacker[*].NIC.PHY.currentPage = 0
*.IEEE802154NodesAttacker[*].NIC.PHY.symbolsPerOctet = 2    # 2 symbols for 1 Byte @ 2.4 GHz O-QPSK
*.IEEE802154NodesAttacker[*].NIC.PHY.SHRDuration = 10       # 5 Bytes (1 Byte Preamble + 1 Byte SFD) = 10 Symbols @ 2.4 GHz O-QPSK


#--------------------Power Consumption--------------------#
*.IEEE802154Nodes[*].NIC.radioInterface.usage_IEEE802154Radio_idle = -1mA   # -1 to disable battery registration
*.IEEE802154Nodes[*].NIC.radioInterface.usage_IEEE802154Radio_recv = -1mA
*.IEEE802154Nodes[*].NIC.radioInterface.usage_IEEE802154Radio_send = -1mA
*.IEEE802154Nodes[*].NIC.radioInterface.usage_IEEE802154Radio_sleep = -1mA
*.IEEE802154Nodes[*].batteryType = "InetSimpleBattery"
*.IEEE802154Nodes[*].battery.capacity = 3800
*.IEEE802154Nodes[*].battery.publishTime = 10s
*.IEEE802154Nodes[*].battery.resolution = 10s
*.IEEE802154Nodes[*].battery.voltage = 3.3



*.IEEE802154NodesAttacker[*].NIC.radioInterface.usage_IEEE802154Radio_idle = -1mA   # -1 to disable battery registration
*.IEEE802154NodesAttacker[*].NIC.radioInterface.usage_IEEE802154Radio_recv = -1mA
*.IEEE802154NodesAttacker[*].NIC.radioInterface.usage_IEEE802154Radio_send = -1mA
*.IEEE802154NodesAttacker[*].NIC.radioInterface.usage_IEEE802154Radio_sleep = -1mA
*.IEEE802154NodesAttacker[*].batteryType = "InetSimpleBattery"
*.IEEE802154NodesAttacker[*].battery.capacity = 3800
*.IEEE802154NodesAttacker[*].battery.publishTime = 10s
*.IEEE802154NodesAttacker[*].battery.resolution = 10s
*.IEEE802154NodesAttacker[*].battery.voltage = 3.3


#--------------------Channel Control Parameters--------------------#
*.channelControl.carrierFrequency = 2475MHz         # e.g. 2475 MHz for Channel 25 --> F = 2405 + 5 * (k -11) for K = 11, 12, ... , 26 (channel number)
*.channelControl.pMax = 1mW 
*.channelControl.sat = -82dBm
*.channelControl.alpha = 2
*.channelControl.numChannels = 27                   # 27 channels for IEEE 802.15.4


