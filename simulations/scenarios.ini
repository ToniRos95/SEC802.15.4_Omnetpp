[General]
network = ieee802154.simulations.net 


###--------- Scenario: secBcn ---------###
# N single and static IEEE 802.15.4 Hosts, N-1 sender node and one coordinator
# Communication from a node to a coordinator in a beacon-enabled PAN
# Acknowledgments enable
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order = 4
# Superframe Order = 4
# Duty Cycle = 100.00 %
###---------------------------------------------------------------###
[Config secBcn]
*.numHosts = ${N=2} # named interation variable to automatically set-up the number of RNGs etc.
*.numAttackers = 0

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false # set XYZ positions manually

*.IEEE802154Nodes[0].mobility.initialX = 75m
*.IEEE802154Nodes[0].mobility.initialY = 50m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 0m
*.IEEE802154Nodes[1].mobility.initialY = 0m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[2].mobility.initialX = 150m
*.IEEE802154Nodes[2].mobility.initialY = 0m
*.IEEE802154Nodes[2].mobility.initialZ = 0m

*.IEEE802154Nodes[3].mobility.initialX = 150m
*.IEEE802154Nodes[3].mobility.initialY = 100m
*.IEEE802154Nodes[3].mobility.initialZ = 0m

*.IEEE802154Nodes[4].mobility.initialX = 0m
*.IEEE802154Nodes[4].mobility.initialY = 100m
*.IEEE802154Nodes[4].mobility.initialZ = 0m


*.IEEE802154Nodes[*].application.packetLength = 8Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 500ms # packets sent every 100ms
*.IEEE802154Nodes[*].application.numPackets = 1000
*.IEEE802154Nodes[*].application.startTime = 3s # set this past the mac start time (Should be randomized)
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = ""
#*.IEEE802154Nodes[1].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0004"
*.IEEE802154Nodes[1].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
#*.IEEE802154Nodes[1..].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"

*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false # node[0] is sending the GTS
*.IEEE802154Nodes[1..].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SecurityEnabled = false
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.replayProtection = true
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.Seculevel = 7

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 1 # 0 = direct transmission without acks (Figure 70 of 802.15.4-2006) # 1 = direct with ack
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5 # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols



###--------- Scenario: attacker ---------###
# N single and static IEEE 802.15.4 Hosts, N-1 sender node and one coordinator
# Communication from a node to a coordinator in a beacon-enabled PAN
# Acknowledgments enable
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order = 4
# Superframe Order = 4
# Duty Cycle = 100.00 %
###---------------------------------------------------------------###

[Config Attacker]
*.numHosts = ${N=5} # named interation variable to automatically set-up the number of RNGs etc.
*.numAttackers = 1

num-rngs = ${N} # set to number of hosts to choose individual RNGs for each host
seed-0-mt = ${C=50..100} # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = ${0 .. ${N}}

sim-time-limit = 120s # 100 packets, one per second plus 10s start time

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false # set XYZ positions manually


*.IEEE802154Nodes[0].mobility.initialX = 75m
*.IEEE802154Nodes[0].mobility.initialY = 50m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 0m
*.IEEE802154Nodes[1].mobility.initialY = 0m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[2].mobility.initialX = 150m
*.IEEE802154Nodes[2].mobility.initialY = 0m
*.IEEE802154Nodes[2].mobility.initialZ = 0m

*.IEEE802154Nodes[3].mobility.initialX = 150m
*.IEEE802154Nodes[3].mobility.initialY = 100m
*.IEEE802154Nodes[3].mobility.initialZ = 0m

*.IEEE802154Nodes[4].mobility.initialX = 0m
*.IEEE802154Nodes[4].mobility.initialY = 100m
*.IEEE802154Nodes[4].mobility.initialZ = 0m


*.IEEE802154Nodes[*].application.packetLength = 8Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 100ms # packets sent every 100ms
*.IEEE802154Nodes[*].application.numPackets = 1000
*.IEEE802154Nodes[*].application.startTime = uniform(2000ms,3000ms) # set this past the mac start time (Should be randomized)
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[1..].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false # node[0] is sending the GTS
*.IEEE802154Nodes[1..].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 1 # 0 = direct transmission without acks (Figure 70 of 802.15.4-2006) # 1 = direct with ack
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5 # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols


*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 4
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 4
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 4
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 4



*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SecurityEnabled = true
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.Seculevel = 7
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.SecurityEnabled = true
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.Seculevel = 7



*.IEEE802154NodesAttacker[*].mobility.initFromDisplayString = false # set XYZ positions manually


*.IEEE802154NodesAttacker[*].mobility.initialX = 160m
*.IEEE802154NodesAttacker[*].mobility.initialY = 50m


*.IEEE802154NodesAttacker[*].application.packetLength = 8Byte
*.IEEE802154NodesAttacker[*].application.protocol = 1
*.IEEE802154NodesAttacker[*].application.sendInterval = 100ms # packets sent every 100ms
*.IEEE802154NodesAttacker[*].application.numPackets = 1000

#*.IEEE802154NodesAttacker[*].application.startTime = 3s # set this past the mac start time (Should be randomized)
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
#*.IEEE802154Attacker[0].application.destAddresses = ""
*.IEEE802154NodesAttacker[0].application.destAddresses = ""
#*.IEEE802154Nodes[1..].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"

*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false # node[0] is sending the GTS
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
#*.IEEE802154Attacker[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true




*.IEEE802154NodesAttacker[*].Network.stdLLC.TXoption = 1 # 0 = direct transmission without acks (Figure 70 of 802.15.4-2006) # 1 = direct with ack
*.IEEE802154NodesAttacker[*].Network.stdLLC.ScanDuration = 1.5 # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols

*.IEEE802154NodesAttacker[*].Network.stdLLC.BeaconOrder = 4
*.IEEE802154NodesAttacker[*].Network.stdLLC.SuperframeOrder = 4
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 4
*.IEEE802154NodesAttacker[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 4

#*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 4
#*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 4
#*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 4
#*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 4


###--------- Scenario: Beacon ---------###
# N single and static IEEE 802.15.4 Hosts, N-1 sender node and one coordinator
# Communication from a node to a coordinator in a beacon-enabled PAN
# Acknowledgments enable
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order = 4
# Superframe Order = 4
# Duty Cycle = 100.00 %
###---------------------------------------------------------------###


[Config BeaconMode-TXtoCoordinator-NoCFP]
*.numHosts = ${N=5} # named interation variable to automatically set-up the number of RNGs etc.

num-rngs = ${N} # set to number of hosts to choose individual RNGs for each host
seed-0-mt = ${C=50..100} # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = ${0 .. ${N}}

sim-time-limit = 120s # 100 packets, one per second plus 10s start time

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false # set XYZ positions manually


*.IEEE802154Nodes[0].mobility.initialX = 75m
*.IEEE802154Nodes[0].mobility.initialY = 50m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 0m
*.IEEE802154Nodes[1].mobility.initialY = 0m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[2].mobility.initialX = 150m
*.IEEE802154Nodes[2].mobility.initialY = 0m
*.IEEE802154Nodes[2].mobility.initialZ = 0m

*.IEEE802154Nodes[3].mobility.initialX = 150m
*.IEEE802154Nodes[3].mobility.initialY = 100m
*.IEEE802154Nodes[3].mobility.initialZ = 0m

*.IEEE802154Nodes[4].mobility.initialX = 0m
*.IEEE802154Nodes[4].mobility.initialY = 100m
*.IEEE802154Nodes[4].mobility.initialZ = 0m


*.IEEE802154Nodes[*].application.packetLength = 20Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 100ms # packets sent every 100ms
*.IEEE802154Nodes[*].application.numPackets = 1000
*.IEEE802154Nodes[*].application.startTime = uniform(8000ms,11000ms) # set this past the mac start time (Should be randomized)
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[1..].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false # node[0] is sending the GTS
*.IEEE802154Nodes[1..].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 1 # 0 = direct transmission without acks (Figure 70 of 802.15.4-2006) # 1 = direct with ack
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5 # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols


*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 4
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 4
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 4
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 4


###----- Scenario: Node transmits to coordinator in non-beacon-enabled PAN ----###
# Two single and static IEEE 802.15.4 Hosts, one sender node and one coordinator
# Scenario from 802.15.4 standard - Figure 7 and Figure 70
# Communication from a node to a coordinator in a non-beacon-enabled PAN 
# Acknowledgments enabled or disabled (depending on TXoption)
# CAP transmission
# Direct transmission
# Beacon Order      = 15 -> no regular beacon, only when requested
# Superframe Order  = 15 -> no superframe
# --> Non-Beacon-Enabled Mode
###---------------------------------------------------------------###
[Config NonBeaconMode-TXtoCoordinator]

*.numHosts = ${N=15}     # named interation variable to automatically set-up the number of RNGs etc.

num-rngs = ${N}       # set to number of hosts to choose individual RNGs for each host
#seed-0-mt = 111      # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = ${0 .. ${N}}

sim-time-limit = 120s                                   # 100 packets, one per second plus 10s start time

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false     # set XYZ positions manually 

*.IEEE802154Nodes[*].mobility.initialX = uniform(10m,80m)
*.IEEE802154Nodes[*].mobility.initialY = uniform(10m,80m)

*.IEEE802154Nodes[*].application.packetLength = 25Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 1s
*.IEEE802154Nodes[*].application.numPackets = 100
*.IEEE802154Nodes[*].application.startTime = 10s        # set this past the mac start time

# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[1..].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true 
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
#*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false            # node[0] is sending the GTS
*.IEEE802154Nodes[1..].NIC.MAC.IEEE802154Mac.isPANCoordinator = false

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 1                # 0 = direct transmission without ACKs (Figure 70 of 802.15.4-2006)
                                                                # 1 = direct transmission with ACKs
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5          # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 15            # disable superframe / beacons
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 15
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 15     # disable superframe / beacons
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 15


###--------- Scenario: Single FFD starting a WPAN ---------###
# One single and static IEEE 802.15.4 Host
# Single host is starting on the communication channel, searches for other nodes and starts a WPAN
# Scenario to test out correct WPAN starting procedure
# Acknowledgments disabled
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order      = 6 -> Beacon Interval      61440 Symbols = 983.04ms
# Superframe Order  = 6 -> Superframe Duration  61440 Symbols = 983.04ms
# Duty Cycle        = 100.00 %
###---------------------------------------------------------------###
[Config StartWPAN-1Node_Starting_WPAN]

*.numHosts=1

sim-time-limit = 1s       # enough time to run through the startup process

*.IEEE802154Nodes[0].mobility.initFromDisplayString = false     # set XYZ positions manually 

*.IEEE802154Nodes[0].mobility.initialX = 200m
*.IEEE802154Nodes[0].mobility.initialY = 200m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[0].application.packetLength = 10Byte
*.IEEE802154Nodes[0].application.protocol = 1
*.IEEE802154Nodes[0].application.sendInterval = 1s
*.IEEE802154Nodes[0].application.numPackets = 10
*.IEEE802154Nodes[0].application.startTime = 10s        # set this past the mac start time
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0001"

*.IEEE802154Nodes[0].Network.stdLLC.TXoption = 0

*.IEEE802154Nodes[0].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[0].Network.stdLLC.SuperframeOrder = 6
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.SuperframeOrder = 6
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false            # node[0] is sending the GTS


###----- Scenario: Two Nodes competing to start a WPAN ----###
# Two single and static IEEE 802.15.4 Hosts competing to be the WPAN coordinator
# change the seed to adjust the starting behavior
# Acknowledgments disabled
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order      = 6 -> Beacon Interval      61440 Symbols = 983.04ms
# Superframe Order  = 6 -> Superframe Duration  61440 Symbols = 983.04ms
# Duty Cycle        = 100.00 %
###---------------------------------------------------------------###
[Config StartWPAN-2Nodes_Competing2StartWPAN]

*.numHosts = 2

num-rngs = 2
seed-0-mt = 111  # switch around this seed if u want different startup behaviours
seed-1-mt = 222
*.IEEE802154Nodes[0].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module
*.IEEE802154Nodes[1].Network.stdLLC.rng-0 = 1   

sim-time-limit = 3s       # enough time to run through the startup process

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false     # set XYZ positions manually 

*.IEEE802154Nodes[0].mobility.initialX = 10m
*.IEEE802154Nodes[0].mobility.initialY = 10m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 90m
*.IEEE802154Nodes[1].mobility.initialY = 90m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[*].application.packetLength = 10Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 1s
*.IEEE802154Nodes[1].application.numPackets = 100
*.IEEE802154Nodes[*].application.startTime = 10s        # set this past the mac start time
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[1].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 0
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5       	# [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 6


###----- Scenario: Four nodes transfering data to one coordinator ----###
# Four static IEEE 802.15.4 Hosts and one fixed coordinator
# Acknowledgments enabled
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order      = 6 -> Beacon Interval      61440 Symbols = 983.04ms
# Superframe Order  = 5 -> Superframe Duration  30720 Symbols = 491.52ms
# Duty Cycle        = 50.00 %
###----------------------------------------------------------###
[Config BeaconMode-4NodesTXtoCoordinator]

*.numHosts=5

sim-time-limit = 115.0s       # enough time to transmit all 100 packets plus startup delay

num-rngs=5           # number of RNGs to create
seed-0-mt = 1234567  # switch around this seed if you want different startup behaviours
seed-1-mt = 1111111  
seed-2-mt = 2222222
seed-3-mt = 3333333
seed-4-mt = 4444444
*.IEEE802154Nodes[0].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module
*.IEEE802154Nodes[1].Network.stdLLC.rng-0 = 1 
*.IEEE802154Nodes[2].Network.stdLLC.rng-0 = 2
*.IEEE802154Nodes[3].Network.stdLLC.rng-0 = 3
*.IEEE802154Nodes[4].Network.stdLLC.rng-0 = 4

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false

*.IEEE802154Nodes[0].mobility.initialX = 75m
*.IEEE802154Nodes[0].mobility.initialY = 50m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 0m
*.IEEE802154Nodes[1].mobility.initialY = 0m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[2].mobility.initialX = 150m
*.IEEE802154Nodes[2].mobility.initialY = 0m
*.IEEE802154Nodes[2].mobility.initialZ = 0m

*.IEEE802154Nodes[3].mobility.initialX = 150m
*.IEEE802154Nodes[3].mobility.initialY = 100m
*.IEEE802154Nodes[3].mobility.initialZ = 0m

*.IEEE802154Nodes[4].mobility.initialX = 0m
*.IEEE802154Nodes[4].mobility.initialY = 100m
*.IEEE802154Nodes[4].mobility.initialZ = 0m

*.IEEE802154Nodes[*].application.packetLength = 20Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 1s
*.IEEE802154Nodes[*].application.numPackets = 100
*.IEEE802154Nodes[*].application.startTime = 10s # set this past the mac start time
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true 
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false            # node[0] is sending the GTS
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[*].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"  # node0, the PAN coordinator

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 1    # 0 = non-acknowledged direct transmission
                                                    # 1 = acknowledged direct transmission

*.IEEE802154Nodes[*].NIC.radioInterface.ccaMode = 1 # mode 1 = ED only; mode 2 = carrier sense only ; mode 3 = carrier sense + ED
*.IEEE802154Nodes[*].NIC.PHY.CCAMode = 1            # ditto

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 5

*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 5


###----- Scenario: Collision Test in a non-beacon-enabled PAN ----###
# Three single and static IEEE 802.15.4 Hosts, two sender and one coordinator
# Communication from two nodes to a coordinator in a non-beacon-enabled PAN 
# Acknowledgments disabled
# CAP transmission
# Direct transmission
# Beacon Order      = 15 -> no regular beacon, only when requested
# Superframe Order  = 15 -> no superframe
# --> Non-Beacon-Enabled Mode
###---------------------------------------------------------------###
[Config NonBeaconMode-CollisionTest]

*.numHosts=3

seed-0-lcg32 = 111  # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module

sim-time-limit = 10s       # extend to run longer so that additional packets might collide

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false     # set XYZ positions manually 

*.IEEE802154Nodes[0].mobility.initialX = 40m        # coordinator
*.IEEE802154Nodes[0].mobility.initialY = 40m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 0m         # sender 1
*.IEEE802154Nodes[1].mobility.initialY = 0m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[2].mobility.initialX = 80m        # sender 2
*.IEEE802154Nodes[2].mobility.initialY = 80m
*.IEEE802154Nodes[2].mobility.initialZ = 0m

*.IEEE802154Nodes[*].application.packetLength = 30Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 0.1s
*.IEEE802154Nodes[1].application.numPackets = 100
*.IEEE802154Nodes[*].application.startTime = 5s     
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[*].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true 
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
*.IEEE802154Nodes[1].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
*.IEEE802154Nodes[2].NIC.MAC.IEEE802154Mac.isPANCoordinator = false

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 0                # 0 = direct transmission without acks (Figure 70 of 802.15.4-2006) 
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5          # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 15            # disable superframe / beacons
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 15
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 15     # disable superframe / beacons
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 15


###----- Scenario: Association Test in a beacon-enabled PAN ----###
# Two single and static IEEE 802.15.4 Hosts associating with each other
# Acknowledgments disabled
# CAP transmission for beacon-enabled PAN
# Direct transmission
# Beacon Order      = 6 -> Beacon Interval      61440 Symbols = 983.04ms
# Superframe Order  = 5 -> Superframe Duration  30720 Symbols = 491.52ms
# Duty Cycle        = 50.00 %
###---------------------------------------------------------------###
[Config BeaconMode-AssociationTest]

*.numHosts=2

seed-0-lcg32 = 111  # switch around this seed if u want different startup behaviours
*.IEEE802154Nodes[*].Network.stdLLC.rng-0 = 0   # specify which #RNG is used per node / module

sim-time-limit = 1s       # enough time to run through the association process

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false     # set XYZ positions manually 

*.IEEE802154Nodes[0].mobility.initialX = 10m
*.IEEE802154Nodes[0].mobility.initialY = 10m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 80m
*.IEEE802154Nodes[1].mobility.initialY = 80m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[*].application.packetLength = 10Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[*].application.sendInterval = 1s
*.IEEE802154Nodes[1].application.numPackets = 100
*.IEEE802154Nodes[*].application.startTime = 10s        # set this past the mac start time
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
#*.IEEE802154Nodes[1].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"
*.IEEE802154Nodes[*].application.destAddresses = ""

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 0
*.IEEE802154Nodes[*].Network.stdLLC.ScanDuration = 1.5          # [aBaseSuperframeDuration * (2^n + 1)] this is n so - value is Symbols

*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true 
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false            # node[0] is sending the GTS

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 5
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 5


###----- Scenario: GTS Data Transfer Test in a beacon-enabled PAN ----###
# Two single and static IEEE 802.15.4 Hosts, one sender and one coordinator
# Communication from the sender node to the coordinator in a beacon-enabled PAN 
# Acknowledgments enabled or disabled -> depending on TXoption
# GTS transmission
# Direct transmission
# Beacon Order      = 6 -> regular beacon
# Superframe Order  = 6 -> superframe used
# --> Beacon-Enabled Mode
###---------------------------------------------------------------###
[Config BeaconMode-GTSTest]

*.numHosts=2

sim-time-limit = 20s       # extend to run longer

*.IEEE802154Nodes[*].mobility.initFromDisplayString = false

*.IEEE802154Nodes[0].mobility.initialX = 10m
*.IEEE802154Nodes[0].mobility.initialY = 10m
*.IEEE802154Nodes[0].mobility.initialZ = 0m

*.IEEE802154Nodes[1].mobility.initialX = 80m
*.IEEE802154Nodes[1].mobility.initialY = 80m
*.IEEE802154Nodes[1].mobility.initialZ = 0m

*.IEEE802154Nodes[*].application.packetLength = 30Byte
*.IEEE802154Nodes[*].application.protocol = 1
*.IEEE802154Nodes[1].application.sendInterval = 2s
*.IEEE802154Nodes[1].application.numPackets = 10
*.IEEE802154Nodes[0].application.numPackets = 0
*.IEEE802154Nodes[1].application.startTime = 10s # set this past the mac start time
# for IPvxTrafGen use a destination address where the 802.15.4 MAC is represented by the last 8 toupels, LLC::tokenDest converts it into 802.15.4 MAC
# To disable the traffic generator, set destAddresses to ""
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.startWithoutStartReq = true 
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isPANCoordinator = true
*.IEEE802154Nodes[1].NIC.MAC.IEEE802154Mac.isPANCoordinator = false
*.IEEE802154Nodes[0].NIC.MAC.IEEE802154Mac.isRecvGts = false            # node[0] is sending the GTS
*.IEEE802154Nodes[1].NIC.MAC.IEEE802154Mac.isRecvGts = true
*.IEEE802154Nodes[0].application.destAddresses = ""
*.IEEE802154Nodes[1].application.destAddresses = "2001:0DB8:85A3:08D3:0AAA:0000:0000:0000"  # node0, the PAN coordinator

*.IEEE802154Nodes[*].Network.stdLLC.TXoption = 2    # set to 2 == unacknowledged direct transmission in GTS
                                                    # set to 3 == acknowledged direct transmission in GTS 

*.IEEE802154Nodes[*].Network.stdLLC.BeaconOrder = 6
*.IEEE802154Nodes[*].Network.stdLLC.SuperframeOrder = 6

*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.BeaconOrder = 6
*.IEEE802154Nodes[*].NIC.MAC.IEEE802154Mac.SuperframeOrder = 6
