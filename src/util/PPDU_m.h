//
// Generated file, do not edit! Created by nedtool 4.6 from util/PPDU.msg.
//

#ifndef _PPDU_M_H_
#define _PPDU_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "IEEE802154Fields.h"
    #include "IEEE802154Enum.h"
// }}

/**
 * Class generated from <tt>util/PPDU.msg:32</tt> by nedtool.
 * <pre>
 * packet pdDataInd
 * {
 *     unsigned char psduLength;       // ≤ aMaxPHYPacketSize
 *     unsigned char ppduLinkQuality;  // 0x00–0xff
 *     // PSDU Payload is just encapsulated
 * }
 * </pre>
 */
class pdDataInd : public ::cPacket
{
  protected:
    unsigned char psduLength_var;
    unsigned char ppduLinkQuality_var;

  private:
    void copy(const pdDataInd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const pdDataInd&);

  public:
    pdDataInd(const char *name=NULL, int kind=0);
    pdDataInd(const pdDataInd& other);
    virtual ~pdDataInd();
    pdDataInd& operator=(const pdDataInd& other);
    virtual pdDataInd *dup() const {return new pdDataInd(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned char getPsduLength() const;
    virtual void setPsduLength(unsigned char psduLength);
    virtual unsigned char getPpduLinkQuality() const;
    virtual void setPpduLinkQuality(unsigned char ppduLinkQuality);
};

inline void doPacking(cCommBuffer *b, pdDataInd& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, pdDataInd& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:39</tt> by nedtool.
 * <pre>
 * packet ppdu
 * {
 *     unsigned char Preamble[4];      // Synchronization Header (SHR) 
 *     unsigned char SFD;              // Start of Frame Delimiter (8-bit except ASK)
 *     unsigned char PHR;              // PHY Header containing 7 Bits Frame Length & 1 Bit Reserved
 * }
 * </pre>
 */
class ppdu : public ::cPacket
{
  protected:
    unsigned char Preamble_var[4];
    unsigned char SFD_var;
    unsigned char PHR_var;

  private:
    void copy(const ppdu& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ppdu&);

  public:
    ppdu(const char *name=NULL, int kind=0);
    ppdu(const ppdu& other);
    virtual ~ppdu();
    ppdu& operator=(const ppdu& other);
    virtual ppdu *dup() const {return new ppdu(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPreambleArraySize() const;
    virtual unsigned char getPreamble(unsigned int k) const;
    virtual void setPreamble(unsigned int k, unsigned char Preamble);
    virtual unsigned char getSFD() const;
    virtual void setSFD(unsigned char SFD);
    virtual unsigned char getPHR() const;
    virtual void setPHR(unsigned char PHR);
};

inline void doPacking(cCommBuffer *b, ppdu& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ppdu& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:46</tt> by nedtool.
 * <pre>
 * packet edConf
 * {
 *     unsigned char status @enum(phyState);  // refer to IEEE802154Enum.h
 *     unsigned char EnergyLevel;             // 0x00–0xff
 * }
 * </pre>
 */
class edConf : public ::cPacket
{
  protected:
    unsigned char status_var;
    unsigned char EnergyLevel_var;

  private:
    void copy(const edConf& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const edConf&);

  public:
    edConf(const char *name=NULL, int kind=0);
    edConf(const edConf& other);
    virtual ~edConf();
    edConf& operator=(const edConf& other);
    virtual edConf *dup() const {return new edConf(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned char getStatus() const;
    virtual void setStatus(unsigned char status);
    virtual unsigned char getEnergyLevel() const;
    virtual void setEnergyLevel(unsigned char EnergyLevel);
};

inline void doPacking(cCommBuffer *b, edConf& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, edConf& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:52</tt> by nedtool.
 * <pre>
 * message GetRequest
 * {
 *     unsigned short PIBattr @enum(PhyPIB_Attributes);   // refer to IEEE802154Enum.h
 *     unsigned short PIBind;
 * }
 * </pre>
 */
class GetRequest : public ::cMessage
{
  protected:
    unsigned short PIBattr_var;
    unsigned short PIBind_var;

  private:
    void copy(const GetRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GetRequest&);

  public:
    GetRequest(const char *name=NULL, int kind=0);
    GetRequest(const GetRequest& other);
    virtual ~GetRequest();
    GetRequest& operator=(const GetRequest& other);
    virtual GetRequest *dup() const {return new GetRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getPIBattr() const;
    virtual void setPIBattr(unsigned short PIBattr);
    virtual unsigned short getPIBind() const;
    virtual void setPIBind(unsigned short PIBind);
};

inline void doPacking(cCommBuffer *b, GetRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:58</tt> by nedtool.
 * <pre>
 * message GetConfirm extends GetRequest
 * {
 *     unsigned short status @enum(PhyPIB_Status); // refer to IEEE802154Enum.h
 *     double value;
 * }
 * </pre>
 */
class GetConfirm : public ::GetRequest
{
  protected:
    unsigned short status_var;
    double value_var;

  private:
    void copy(const GetConfirm& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GetConfirm&);

  public:
    GetConfirm(const char *name=NULL, int kind=0);
    GetConfirm(const GetConfirm& other);
    virtual ~GetConfirm();
    GetConfirm& operator=(const GetConfirm& other);
    virtual GetConfirm *dup() const {return new GetConfirm(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getStatus() const;
    virtual void setStatus(unsigned short status);
    virtual double getValue() const;
    virtual void setValue(double value);
};

inline void doPacking(cCommBuffer *b, GetConfirm& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, GetConfirm& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:64</tt> by nedtool.
 * <pre>
 * message SetRequest
 * {
 *     unsigned short PIBattr @enum(PhyPIB_Attributes);    // refer to IEEE802154Enum.h
 *     unsigned short PIBind;
 *     double value;
 * }
 * </pre>
 */
class SetRequest : public ::cMessage
{
  protected:
    unsigned short PIBattr_var;
    unsigned short PIBind_var;
    double value_var;

  private:
    void copy(const SetRequest& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SetRequest&);

  public:
    SetRequest(const char *name=NULL, int kind=0);
    SetRequest(const SetRequest& other);
    virtual ~SetRequest();
    SetRequest& operator=(const SetRequest& other);
    virtual SetRequest *dup() const {return new SetRequest(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getPIBattr() const;
    virtual void setPIBattr(unsigned short PIBattr);
    virtual unsigned short getPIBind() const;
    virtual void setPIBind(unsigned short PIBind);
    virtual double getValue() const;
    virtual void setValue(double value);
};

inline void doPacking(cCommBuffer *b, SetRequest& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SetRequest& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>util/PPDU.msg:71</tt> by nedtool.
 * <pre>
 * message SetConfirm
 * {
 *     unsigned short PIBattr @enum(PhyPIB_Attributes);    // refer to IEEE802154Enum.h
 *     unsigned short status @enum(PhyPIB_Status); // refer to IEEE802154Enum.h
 * }
 * </pre>
 */
class SetConfirm : public ::cMessage
{
  protected:
    unsigned short PIBattr_var;
    unsigned short status_var;

  private:
    void copy(const SetConfirm& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SetConfirm&);

  public:
    SetConfirm(const char *name=NULL, int kind=0);
    SetConfirm(const SetConfirm& other);
    virtual ~SetConfirm();
    SetConfirm& operator=(const SetConfirm& other);
    virtual SetConfirm *dup() const {return new SetConfirm(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned short getPIBattr() const;
    virtual void setPIBattr(unsigned short PIBattr);
    virtual unsigned short getStatus() const;
    virtual void setStatus(unsigned short status);
};

inline void doPacking(cCommBuffer *b, SetConfirm& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SetConfirm& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PPDU_M_H_

